{
  "id": "a_lift_easy_r",
  "template": [
    "__var0__|canLift|__var1__",
    [
      "__var0__|Type|__agent__",
      "__agent__|SubClassOf|Agent",
      "__var0__|hasCapability|__var3__",
      "LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper)",
      "__var3__|isCapabilityOf|__var0__",
      "__var0__|hasComponent|__var4__",
      "__var4__|Type|__component__",
      "__component__|SubClassOf|Gripper",
      "__var0__|hasComponent|__var5__",
      "__var5__|Type|__component__",
      "__component__|SubClassOf|Gripper",
      "__var1__|Type|__object__",
      "__object__|SubClassOf|Object",
      "__var1__|hasDisposition|__var2__",
      "LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart))",
      "__var2__|isDispositionOf|__var1__",
      "__var1__|hasPart|__var6__",
      "__var6__|Type|__part__",
      "__part__|SubClassOf|HoldablePart",
      "__var1__|hasPart|__var7__",
      "__var7__|Type|__part__",
      "__part__|SubClassOf|HoldablePart",
      "__var1__|isTouchableBy|__var0__",
      "__var4__|Type|Gripper",
      "Gripper|SubClassOf|EndEffector",
      "__var0__|hasComponent|__var4__",
      "__var4__|hasWeightLimit|integer#2",
      "__var1__|hasWeight|integer#1",
      "lesserThan(integer#1,integer#2)"
    ]
  ],
  "concepts" : [
  "can lift", 
  "liftable disposition", "min2holdable_part",
  "lifting capability", "min2gripper", 
  "touchable", 
  "weight limit", "object_weight"  
],
  "answers": [
    {
      "id": "a_lift_easy_0r",
      "selected_classes": [
        "cooking pot",
        "handle",
        "robot",
        "two-finger claw"
      ],
      "question": "-Inference : jkcp|canLift|kaax \n -Justifications : jkcp|Type|Robot, Robot|SubClassOf|Agent, jkcp|hasCapability|sq, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), sq|isCapabilityOf|jkcp, jkcp|hasComponent|kke, kke|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, jkcp|hasComponent|qnuy, qnuy|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, kaax|Type|CookingPot, CookingPot|SubClassOf|Object, kaax|hasDisposition|fjqf, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), fjqf|isDispositionOf|kaax, kaax|hasPart|gn, gn|Type|Hold, Hold|SubClassOf|HoldablePart, kaax|hasPart|o, o|Type|Hold, Hold|SubClassOf|HoldablePart, kaax|isTouchableBy|jkcp, kke|Type|Gripper, Gripper|SubClassOf|EndEffector, jkcp|hasComponent|kke, kke|hasWeightLimit|integer#62, kaax|hasWeight|integer#30, lesserThan(integer#30,integer#62). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the robot can lift the cooking pot because it has a lifting capability with at least two grippers that are compatible with the pot's touchable parts and have sufficient weight limit for the pot's weight."
    },
    {
      "id": "a_lift_easy_1r",
      "selected_classes": [
        "laundry basket",
        "hand grip",
        "robot",
        "mechanical hand"
      ],
      "question": "-Inference : oek|canLift|fph \n -Justifications : oek|Type|Robot, Robot|SubClassOf|Agent, oek|hasCapability|pu, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), pu|isCapabilityOf|oek, oek|hasComponent|ntu, ntu|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, oek|hasComponent|tp, tp|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, fph|Type|LaundryBasket, LaundryBasket|SubClassOf|Object, fph|hasDisposition|inu, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), inu|isDispositionOf|fph, fph|hasPart|mqav, mqav|Type|HandGrip, HandGrip|SubClassOf|HoldablePart, fph|hasPart|fum, fum|Type|HandGrip, HandGrip|SubClassOf|HoldablePart, fph|isTouchableBy|oek, ntu|Type|Gripper, Gripper|SubClassOf|EndEffector, oek|hasComponent|ntu, ntu|hasWeightLimit|integer#52, fph|hasWeight|integer#44, lesserThan(integer#44,integer#52). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the robot can lift the laundry basket because it has a lifting capability with at least two grippers, and the basket has a liftable disposition due to its hand grips being touchable by the robot's mechanical hands which are grippers themselves. The weight of the basket is also within the limit of the robot's gripper."
    },
    {
      "id": "a_lift_easy_2r",
      "selected_classes": [
        "laundry basket",
        "handle",
        "pr2",
        "manipulator"
      ],
      "question": "-Inference : mhq|canLift|j \n -Justifications : mhq|Type|Pr2, Pr2|SubClassOf|Agent, mhq|hasCapability|vpxv, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), vpxv|isCapabilityOf|mhq, mhq|hasComponent|rvwm, rvwm|Type|Manipulator, Manipulator|SubClassOf|Gripper, mhq|hasComponent|s, s|Type|Manipulator, Manipulator|SubClassOf|Gripper, j|Type|LaundryBasket, LaundryBasket|SubClassOf|Object, j|hasDisposition|oka, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), oka|isDispositionOf|j, j|hasPart|iubd, iubd|Type|Grip, Grip|SubClassOf|HoldablePart, j|hasPart|u, u|Type|Grip, Grip|SubClassOf|HoldablePart, j|isTouchableBy|mhq, rvwm|Type|Gripper, Gripper|SubClassOf|EndEffector, mhq|hasComponent|rvwm, rvwm|hasWeightLimit|integer#66, j|hasWeight|integer#63, lesserThan(integer#63,integer#66). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the PR2 robot can lift the laundry basket because it has a lifting capability through its grippers and the basket has a liftable disposition due to its grippable parts being fewer than the minimum requirement for non-liftability. The robot's gripper weight limit exceeds the basket's weight, allowing safe lifting."
    },
    {
      "id": "a_lift_easy_3r",
      "selected_classes": [
        "cooking pot",
        "handle",
        "tiago",
        "two-finger claw"
      ],
      "question": "-Inference : fm|canLift|c \n -Justifications : fm|Type|Tiago, Tiago|SubClassOf|Agent, fm|hasCapability|p, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), p|isCapabilityOf|fm, fm|hasComponent|ijdk, ijdk|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, fm|hasComponent|m, m|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, c|Type|CookingPot, CookingPot|SubClassOf|Object, c|hasDisposition|oq, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), oq|isDispositionOf|c, c|hasPart|q, q|Type|Grip, Grip|SubClassOf|HoldablePart, c|hasPart|vqtj, vqtj|Type|Grip, Grip|SubClassOf|HoldablePart, c|isTouchableBy|fm, ijdk|Type|Gripper, Gripper|SubClassOf|EndEffector, fm|hasComponent|ijdk, ijdk|hasWeightLimit|integer#75, c|hasWeight|integer#61, lesserThan(integer#61,integer#75). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Tiago robot can lift the cooking pot because it has a lifting capability with two gripper components that are compatible with the pot's grips and weight limit."
    },
    {
      "id": "a_lift_easy_4r",
      "selected_classes": [
        "laundry basket",
        "handle",
        "robot",
        "claw"
      ],
      "question": "-Inference : efej|canLift|lw \n -Justifications : efej|Type|Robot, Robot|SubClassOf|Agent, efej|hasCapability|fasc, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), fasc|isCapabilityOf|efej, efej|hasComponent|ktt, ktt|Type|Claw, Claw|SubClassOf|Gripper, efej|hasComponent|jul, jul|Type|Claw, Claw|SubClassOf|Gripper, lw|Type|LaundryBasket, LaundryBasket|SubClassOf|Object, lw|hasDisposition|kt, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), kt|isDispositionOf|lw, lw|hasPart|h, h|Type|Grip, Grip|SubClassOf|HoldablePart, lw|hasPart|dnxj, dnxj|Type|Grip, Grip|SubClassOf|HoldablePart, lw|isTouchableBy|efej, ktt|Type|Gripper, Gripper|SubClassOf|EndEffector, efej|hasComponent|ktt, ktt|hasWeightLimit|integer#79, lw|hasWeight|integer#46, lesserThan(integer#46,integer#79). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the robot can lift the laundry basket because it has a lifting capability with at least two grippers, including its claws, and the basket is liftable due to having at least two grippable parts that are within the robot's weight limit for its end effector."
    },
    {
      "id": "a_lift_easy_5r",
      "selected_classes": [
        "oven tray",
        "handle",
        "pepper",
        "claw"
      ],
      "question": "-Inference : i|canLift|ziqo \n -Justifications : i|Type|Pepper, Pepper|SubClassOf|Agent, i|hasCapability|p, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), p|isCapabilityOf|i, i|hasComponent|cuo, cuo|Type|Claw, Claw|SubClassOf|Gripper, i|hasComponent|ezg, ezg|Type|Claw, Claw|SubClassOf|Gripper, ziqo|Type|OvenTray, OvenTray|SubClassOf|Object, ziqo|hasDisposition|kalt, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), kalt|isDispositionOf|ziqo, ziqo|hasPart|o, o|Type|Grip, Grip|SubClassOf|HoldablePart, ziqo|hasPart|wdfz, wdfz|Type|Grip, Grip|SubClassOf|HoldablePart, ziqo|isTouchableBy|i, cuo|Type|Gripper, Gripper|SubClassOf|EndEffector, i|hasComponent|cuo, cuo|hasWeightLimit|integer#68, ziqo|hasWeight|integer#49, lesserThan(integer#49,integer#68). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Pepper robot can lift the oven tray because it has a lifting capability with at least two grippers, and the tray has a liftable disposition due to its grip parts being touchable by the robot's claw gripper which has a sufficient weight limit for the tray."
    },
    {
      "id": "a_lift_easy_6r",
      "selected_classes": [
        "suitcase",
        "handle",
        "pepper",
        "claw"
      ],
      "question": "-Inference : lg|canLift|ucw \n -Justifications : lg|Type|Pepper, Pepper|SubClassOf|Agent, lg|hasCapability|gm, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), gm|isCapabilityOf|lg, lg|hasComponent|sma, sma|Type|Claw, Claw|SubClassOf|Gripper, lg|hasComponent|u, u|Type|Claw, Claw|SubClassOf|Gripper, ucw|Type|Suitcase, Suitcase|SubClassOf|Object, ucw|hasDisposition|xauj, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), xauj|isDispositionOf|ucw, ucw|hasPart|noo, noo|Type|Grip, Grip|SubClassOf|HoldablePart, ucw|hasPart|bj, bj|Type|Grip, Grip|SubClassOf|HoldablePart, ucw|isTouchableBy|lg, sma|Type|Gripper, Gripper|SubClassOf|EndEffector, lg|hasComponent|sma, sma|hasWeightLimit|integer#73, ucw|hasWeight|integer#35, lesserThan(integer#35,integer#73). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Pepper robot can lift the suitcase because it has a lifting capability with at least two grippers, including its claws, and the suitcase has a liftable disposition due to having at least two holdable parts like grips. The robot can touch the suitcase, and its claw gripper has a weight limit greater than the suitcase's weight."
    },
    {
      "id": "a_lift_easy_7r",
      "selected_classes": [
        "bucket",
        "handle",
        "robot",
        "claw"
      ],
      "question": "-Inference : wr|canLift|xbl \n -Justifications : wr|Type|Robot, Robot|SubClassOf|Agent, wr|hasCapability|py, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), py|isCapabilityOf|wr, wr|hasComponent|z, z|Type|Claw, Claw|SubClassOf|Gripper, wr|hasComponent|mw, mw|Type|Claw, Claw|SubClassOf|Gripper, xbl|Type|Bucket, Bucket|SubClassOf|Object, xbl|hasDisposition|uj, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), uj|isDispositionOf|xbl, xbl|hasPart|k, k|Type|Handle, Handle|SubClassOf|HoldablePart, xbl|hasPart|qxv, qxv|Type|Handle, Handle|SubClassOf|HoldablePart, xbl|isTouchableBy|wr, z|Type|Gripper, Gripper|SubClassOf|EndEffector, wr|hasComponent|z, z|hasWeightLimit|integer#77, xbl|hasWeight|integer#30, lesserThan(integer#30,integer#77). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the robot can lift the bucket because it has a lifting capability with at least two claws acting as grippers, and the bucket has a liftable disposition due to its handles being touchable by the robot. The weight of the bucket is also within the limit of the robot's claws."
    },
    {
      "id": "a_lift_easy_8r",
      "selected_classes": [
        "laundry basket",
        "handle",
        "pepper",
        "two-finger claw"
      ],
      "question": "-Inference : sprt|canLift|lc \n -Justifications : sprt|Type|Pepper, Pepper|SubClassOf|Agent, sprt|hasCapability|zeha, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), zeha|isCapabilityOf|sprt, sprt|hasComponent|mydl, mydl|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, sprt|hasComponent|ahqx, ahqx|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, lc|Type|LaundryBasket, LaundryBasket|SubClassOf|Object, lc|hasDisposition|f, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), f|isDispositionOf|lc, lc|hasPart|x, x|Type|Hold, Hold|SubClassOf|HoldablePart, lc|hasPart|iixy, iixy|Type|Hold, Hold|SubClassOf|HoldablePart, lc|isTouchableBy|sprt, mydl|Type|Gripper, Gripper|SubClassOf|EndEffector, sprt|hasComponent|mydl, mydl|hasWeightLimit|integer#68, lc|hasWeight|integer#64, lesserThan(integer#64,integer#68). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Pepper robot can lift the laundry basket because it has a lifting capability with at least two grippers, and the basket is liftable with parts that are holdable by the robot's grippers, which have sufficient weight limit for the basket's weight."
    },
    {
      "id": "a_lift_easy_9r",
      "selected_classes": [
        "bucket",
        "handle",
        "tiago",
        "two-finger claw"
      ],
      "question": "-Inference : xe|canLift|yr \n -Justifications : xe|Type|Tiago, Tiago|SubClassOf|Agent, xe|hasCapability|ztg, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), ztg|isCapabilityOf|xe, xe|hasComponent|bkp, bkp|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, xe|hasComponent|x, x|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, yr|Type|Bucket, Bucket|SubClassOf|Object, yr|hasDisposition|qeo, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), qeo|isDispositionOf|yr, yr|hasPart|zdt, zdt|Type|Grip, Grip|SubClassOf|HoldablePart, yr|hasPart|u, u|Type|Grip, Grip|SubClassOf|HoldablePart, yr|isTouchableBy|xe, bkp|Type|Gripper, Gripper|SubClassOf|EndEffector, xe|hasComponent|bkp, bkp|hasWeightLimit|integer#49, yr|hasWeight|integer#38, lesserThan(integer#38,integer#49). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " The Tiago robot can lift the bucket because it has a lifting capability with two gripper components that are compatible with the bucket's grips, and its weight limit exceeds the bucket's weight."
    },
    {
      "id": "a_lift_easy_10r",
      "selected_classes": [
        "cooking pot",
        "handle",
        "pepper",
        "manipulator"
      ],
      "question": "-Inference : miko|canLift|smi \n -Justifications : miko|Type|Pepper, Pepper|SubClassOf|Agent, miko|hasCapability|xx, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), xx|isCapabilityOf|miko, miko|hasComponent|btl, btl|Type|Manipulator, Manipulator|SubClassOf|Gripper, miko|hasComponent|zkwc, zkwc|Type|Manipulator, Manipulator|SubClassOf|Gripper, smi|Type|CookingPot, CookingPot|SubClassOf|Object, smi|hasDisposition|ruy, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), ruy|isDispositionOf|smi, smi|hasPart|xp, xp|Type|Hold, Hold|SubClassOf|HoldablePart, smi|hasPart|kj, kj|Type|Hold, Hold|SubClassOf|HoldablePart, smi|isTouchableBy|miko, btl|Type|Gripper, Gripper|SubClassOf|EndEffector, miko|hasComponent|btl, btl|hasWeightLimit|integer#54, smi|hasWeight|integer#37, lesserThan(integer#37,integer#54). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Pepper robot can lift the cooking pot because it has a lifting capability with at least two grippers, and the pot is liftable due to its holdable parts being touchable by the robot's gripper which has an appropriate weight limit for the pot's weight."
    },
    {
      "id": "a_lift_easy_11r",
      "selected_classes": [
        "suitcase",
        "hand grip",
        "pepper",
        "two-finger claw"
      ],
      "question": "-Inference : rote|canLift|g \n -Justifications : rote|Type|Pepper, Pepper|SubClassOf|Agent, rote|hasCapability|kr, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), kr|isCapabilityOf|rote, rote|hasComponent|u, u|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, rote|hasComponent|ff, ff|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, g|Type|Suitcase, Suitcase|SubClassOf|Object, g|hasDisposition|gaxw, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), gaxw|isDispositionOf|g, g|hasPart|ypug, ypug|Type|HandGrip, HandGrip|SubClassOf|HoldablePart, g|hasPart|pcnk, pcnk|Type|HandGrip, HandGrip|SubClassOf|HoldablePart, g|isTouchableBy|rote, u|Type|Gripper, Gripper|SubClassOf|EndEffector, rote|hasComponent|u, u|hasWeightLimit|integer#66, g|hasWeight|integer#38, lesserThan(integer#38,integer#66). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Pepper robot can lift the suitcase because it has a lifting capability with two gripper components that are compatible with the suitcase's hand grips, and its weight limit exceeds the suitcase's weight."
    },
    {
      "id": "a_lift_easy_12r",
      "selected_classes": [
        "bucket",
        "handle",
        "tiago",
        "mechanical hand"
      ],
      "question": "-Inference : junx|canLift|tho \n -Justifications : junx|Type|Tiago, Tiago|SubClassOf|Agent, junx|hasCapability|l, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), l|isCapabilityOf|junx, junx|hasComponent|crtc, crtc|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, junx|hasComponent|uzz, uzz|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, tho|Type|Bucket, Bucket|SubClassOf|Object, tho|hasDisposition|c, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), c|isDispositionOf|tho, tho|hasPart|rrbv, rrbv|Type|Hold, Hold|SubClassOf|HoldablePart, tho|hasPart|srge, srge|Type|Hold, Hold|SubClassOf|HoldablePart, tho|isTouchableBy|junx, crtc|Type|Gripper, Gripper|SubClassOf|EndEffector, junx|hasComponent|crtc, crtc|hasWeightLimit|integer#63, tho|hasWeight|integer#48, lesserThan(integer#48,integer#63). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the robot Tiago can lift the bucket because it has a lifting capability with at least two grippers, and the bucket is liftable due to its holdable parts being touchable by the robot's mechanical hands, which have sufficient weight limit for the bucket's weight."
    },
    {
      "id": "a_lift_easy_13r",
      "selected_classes": [
        "suitcase",
        "handle",
        "pepper",
        "two-finger claw"
      ],
      "question": "-Inference : lfkg|canLift|mc \n -Justifications : lfkg|Type|Pepper, Pepper|SubClassOf|Agent, lfkg|hasCapability|c, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), c|isCapabilityOf|lfkg, lfkg|hasComponent|ys, ys|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, lfkg|hasComponent|bsn, bsn|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, mc|Type|Suitcase, Suitcase|SubClassOf|Object, mc|hasDisposition|kdf, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), kdf|isDispositionOf|mc, mc|hasPart|xi, xi|Type|Grip, Grip|SubClassOf|HoldablePart, mc|hasPart|utmv, utmv|Type|Grip, Grip|SubClassOf|HoldablePart, mc|isTouchableBy|lfkg, ys|Type|Gripper, Gripper|SubClassOf|EndEffector, lfkg|hasComponent|ys, ys|hasWeightLimit|integer#59, mc|hasWeight|integer#46, lesserThan(integer#46,integer#59). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Pepper robot can lift the suitcase because it has a lifting capability with two gripper components that allow it to touch and handle the suitcase, which has a liftable disposition due to its grippable parts. The suitcase's weight is also within the limit of the robot's gripper components."
    },
    {
      "id": "a_lift_easy_14r",
      "selected_classes": [
        "suitcase",
        "handle",
        "tiago",
        "mechanical hand"
      ],
      "question": "-Inference : imrq|canLift|uwv \n -Justifications : imrq|Type|Tiago, Tiago|SubClassOf|Agent, imrq|hasCapability|tp, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), tp|isCapabilityOf|imrq, imrq|hasComponent|qvi, qvi|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, imrq|hasComponent|zgr, zgr|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, uwv|Type|Suitcase, Suitcase|SubClassOf|Object, uwv|hasDisposition|xr, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), xr|isDispositionOf|uwv, uwv|hasPart|y, y|Type|Grip, Grip|SubClassOf|HoldablePart, uwv|hasPart|fap, fap|Type|Grip, Grip|SubClassOf|HoldablePart, uwv|isTouchableBy|imrq, qvi|Type|Gripper, Gripper|SubClassOf|EndEffector, imrq|hasComponent|qvi, qvi|hasWeightLimit|integer#69, uwv|hasWeight|integer#57, lesserThan(integer#57,integer#69). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " The robot Tiago can lift the suitcase because it has a lifting capability with at least two grippers, and the suitcase has a liftable disposition due to its grip parts being touchable by Tiago's mechanical hands, which are grippers themselves. Additionally, the suitcase's weight is within the limit of Tiago's end effector."
    },
    {
      "id": "a_lift_easy_15r",
      "selected_classes": [
        "cooking pot",
        "handle",
        "robot",
        "manipulator"
      ],
      "question": "-Inference : vbf|canLift|gox \n -Justifications : vbf|Type|Robot, Robot|SubClassOf|Agent, vbf|hasCapability|i, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), i|isCapabilityOf|vbf, vbf|hasComponent|lsjt, lsjt|Type|Manipulator, Manipulator|SubClassOf|Gripper, vbf|hasComponent|cted, cted|Type|Manipulator, Manipulator|SubClassOf|Gripper, gox|Type|CookingPot, CookingPot|SubClassOf|Object, gox|hasDisposition|s, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), s|isDispositionOf|gox, gox|hasPart|kufx, kufx|Type|Hold, Hold|SubClassOf|HoldablePart, gox|hasPart|nm, nm|Type|Hold, Hold|SubClassOf|HoldablePart, gox|isTouchableBy|vbf, lsjt|Type|Gripper, Gripper|SubClassOf|EndEffector, vbf|hasComponent|lsjt, lsjt|hasWeightLimit|integer#77, gox|hasWeight|integer#38, lesserThan(integer#38,integer#77). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the robot can lift the cooking pot because it has a lifting capability with at least two grippers, and the pot has a liftable disposition due to its holdable parts being touchable by the robot whose gripper weight limit exceeds the pot's weight."
    },
    {
      "id": "a_lift_easy_16r",
      "selected_classes": [
        "bucket",
        "hand grip",
        "pepper",
        "claw"
      ],
      "question": "-Inference : q|canLift|wpaq \n -Justifications : q|Type|Pepper, Pepper|SubClassOf|Agent, q|hasCapability|vurv, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), vurv|isCapabilityOf|q, q|hasComponent|voeg, voeg|Type|Claw, Claw|SubClassOf|Gripper, q|hasComponent|fqiy, fqiy|Type|Claw, Claw|SubClassOf|Gripper, wpaq|Type|Bucket, Bucket|SubClassOf|Object, wpaq|hasDisposition|blfe, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), blfe|isDispositionOf|wpaq, wpaq|hasPart|e, e|Type|HandGrip, HandGrip|SubClassOf|HoldablePart, wpaq|hasPart|qy, qy|Type|HandGrip, HandGrip|SubClassOf|HoldablePart, wpaq|isTouchableBy|q, voeg|Type|Gripper, Gripper|SubClassOf|EndEffector, q|hasComponent|voeg, voeg|hasWeightLimit|integer#68, wpaq|hasWeight|integer#60, lesserThan(integer#60,integer#68). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Pepper robot can lift the bucket because it has a lifting capability with at least two grippers, including its claws, and the bucket has a liftable disposition due to having at least two hand grips that are touchable by the robot. The weight of the bucket is also within the limit of the robot's end effector."
    },
    {
      "id": "a_lift_easy_17r",
      "selected_classes": [
        "bucket",
        "handle",
        "pr2",
        "two-finger claw"
      ],
      "question": "-Inference : eae|canLift|ab \n -Justifications : eae|Type|Pr2, Pr2|SubClassOf|Agent, eae|hasCapability|h, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), h|isCapabilityOf|eae, eae|hasComponent|hfv, hfv|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, eae|hasComponent|tdm, tdm|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, ab|Type|Bucket, Bucket|SubClassOf|Object, ab|hasDisposition|c, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), c|isDispositionOf|ab, ab|hasPart|ta, ta|Type|Grip, Grip|SubClassOf|HoldablePart, ab|hasPart|umpu, umpu|Type|Grip, Grip|SubClassOf|HoldablePart, ab|isTouchableBy|eae, hfv|Type|Gripper, Gripper|SubClassOf|EndEffector, eae|hasComponent|hfv, hfv|hasWeightLimit|integer#53, ab|hasWeight|integer#42, lesserThan(integer#42,integer#53). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the PR2 agent can lift the bucket because it has a lifting capability with at least two grippers, including its two-finger claws, and the bucket is liftable due to having at least two grip parts that are lighter than the weight limit of the agent's end effector."
    },
    {
      "id": "a_lift_easy_18r",
      "selected_classes": [
        "laundry basket",
        "handle",
        "robot",
        "two-finger claw"
      ],
      "question": "-Inference : r|canLift|zjcr \n -Justifications : r|Type|Robot, Robot|SubClassOf|Agent, r|hasCapability|zzz, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), zzz|isCapabilityOf|r, r|hasComponent|t, t|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, r|hasComponent|tzlg, tzlg|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, zjcr|Type|LaundryBasket, LaundryBasket|SubClassOf|Object, zjcr|hasDisposition|rdxz, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), rdxz|isDispositionOf|zjcr, zjcr|hasPart|agb, agb|Type|Grip, Grip|SubClassOf|HoldablePart, zjcr|hasPart|emdq, emdq|Type|Grip, Grip|SubClassOf|HoldablePart, zjcr|isTouchableBy|r, t|Type|Gripper, Gripper|SubClassOf|EndEffector, r|hasComponent|t, t|hasWeightLimit|integer#69, zjcr|hasWeight|integer#53, lesserThan(integer#53,integer#69). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the robot can lift the laundry basket because it's an agent with a lifting capability through its two-finger claw grippers, which are compatible with the basket's grippable parts and within the gripper's weight limit."
    },
    {
      "id": "a_lift_easy_19r",
      "selected_classes": [
        "laundry basket",
        "handle",
        "tiago",
        "claw"
      ],
      "question": "-Inference : q|canLift|vs \n -Justifications : q|Type|Tiago, Tiago|SubClassOf|Agent, q|hasCapability|eu, LiftingCapability|EquivalentTo|(isCapabilityOf some (hasComponent min 2 Gripper), eu|isCapabilityOf|q, q|hasComponent|wjx, wjx|Type|Claw, Claw|SubClassOf|Gripper, q|hasComponent|exd, exd|Type|Claw, Claw|SubClassOf|Gripper, vs|Type|LaundryBasket, LaundryBasket|SubClassOf|Object, vs|hasDisposition|emc, LiftableDisposition|EquivalentTo|(isDispositionOf some (hasPart min 2 HoldablePart)), emc|isDispositionOf|vs, vs|hasPart|qhl, qhl|Type|Handle, Handle|SubClassOf|HoldablePart, vs|hasPart|hmdu, hmdu|Type|Handle, Handle|SubClassOf|HoldablePart, vs|isTouchableBy|q, wjx|Type|Gripper, Gripper|SubClassOf|EndEffector, q|hasComponent|wjx, wjx|hasWeightLimit|integer#78, vs|hasWeight|integer#31, lesserThan(integer#31,integer#78). -Rule : Agent(?a), hasCapability(?a, ?c), LiftingCapability(?c), Object(?o), hasDisposition(?o, ?d), LiftableDisposition(?d),               isTouchableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasWeightLimit(?g,?w1), hasWeight(?o,?w2), lesserThan(?w2,?w1) -> canLift(?a, ?o).",
      "answer": " the Tiago robot can lift the laundry basket because it has a lifting capability with at least two claws as grippers, and the basket is liftable due to having at least two handles that are touchable by the robot's claw gripper, with the basket's weight being less than the gripper's weight limit."
    }
  ]
}