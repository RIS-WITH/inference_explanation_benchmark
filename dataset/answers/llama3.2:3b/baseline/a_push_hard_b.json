{
  "id": "a_push_hard_b",
  "template": [
    "__var0__|canPush|__var1__",
    [
      "__var0__|Type|__agent__",
      "__agent__|SubClassOf|Agent",
      "__var0__|hasCapability|__var3__",
      "PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector))",
      "__var3__|isCapabilityOf|__var0__",
      "__var0__|hasGripper|__var4__",
      "__var4__|Type|__component__",
      "__component__|SubClassOf|Gripper",
      "__var4__|holdsSomething|boolean#false",
      "__var4__|Type|RigidEndEffector",
      "__var1__|Type|__object__",
      "__object__|SubClassOf|Object",
      "__var1__|hasDisposition|__var2__",
      "PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false)))",
      "__var2__|isDispositionOf|__var1__",
      "__var1__|hasPart|__var5__",
      "__var5__|Type|__part__",
      "__part__|SubClassOf|RollablePart",
      "__var5__|isOnRollableSurface|boolean#true",
      "__var5__|isBlockedBySomething|boolean#false",
      "(isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy",
      "__var1__|isOnTable|__var6__",
      "__var6__|isInSafeArea|__var7__",
      "__var7__|isWithinMovingRangeOf|__var0__",
      "__var4__|Type|Gripper",
      "Gripper|SubClassOf|EndEffector",
      "__var0__|hasComponent|__var4__",
      "__var4__|hasApplicableForce|integer#1",
      "__var1__|requiresForce|integer#1",
      "equal(integer#1,integer#1)"
    ]
  ],
  "concepts" : [
  "can push", 
  "pushable", "on a rollable surface", "unblocked",
  "pushing", "empty_hand", "rigid",
  "approachable", "on a table", "safe area", "moving range",
  "applicable force", "required force"     
],
  "answers": [
    {
      "id": "a_push_hard_0b",
      "selected_classes": [
        "shopping cart",
        "roller",
        "pr2",
        "claw"
      ],
      "question": "-Inference : npad|canPush|pwg \n -Justifications : npad|Type|Pr2, Pr2|SubClassOf|Agent, npad|hasCapability|lyx, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), lyx|isCapabilityOf|npad, npad|hasGripper|a, a|Type|Claw, Claw|SubClassOf|Gripper, a|holdsSomething|boolean#false, a|Type|RigidEndEffector, pwg|Type|MiniShoppingCart, MiniShoppingCart|SubClassOf|Object, pwg|hasDisposition|nnyi, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), nnyi|isDispositionOf|pwg, pwg|hasPart|p, p|Type|Roller, Roller|SubClassOf|RollablePart, p|isOnRollableSurface|boolean#true, p|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, pwg|isOnTable|gs, gs|isInSafeArea|vne, vne|isWithinMovingRangeOf|npad, a|Type|Gripper, Gripper|SubClassOf|EndEffector, npad|hasComponent|a, a|hasApplicableForce|integer#39, pwg|requiresForce|integer#39, equal(integer#39,integer#39). ",
      "answer": " the Pr2 can push the mini shopping cart because it has a pushing capability that allows it to grasp and move an object with a claw gripper, which is compatible with the cart's rollable surface, and the cart is on a table within safe area and approachable by the robot."
    },
    {
      "id": "a_push_hard_1b",
      "selected_classes": [
        "shopping cart",
        "pivot roller",
        "robot",
        "manipulator"
      ],
      "question": "-Inference : sspd|canPush|gpj \n -Justifications : sspd|Type|Robot, Robot|SubClassOf|Agent, sspd|hasCapability|k, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), k|isCapabilityOf|sspd, sspd|hasGripper|dimc, dimc|Type|Manipulator, Manipulator|SubClassOf|Gripper, dimc|holdsSomething|boolean#false, dimc|Type|RigidEndEffector, gpj|Type|MiniShoppingCart, MiniShoppingCart|SubClassOf|Object, gpj|hasDisposition|e, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), e|isDispositionOf|gpj, gpj|hasPart|aa, aa|Type|PivotRoller, PivotRoller|SubClassOf|RollablePart, aa|isOnRollableSurface|boolean#true, aa|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, gpj|isOnTable|v, v|isInSafeArea|aon, aon|isWithinMovingRangeOf|sspd, dimc|Type|Gripper, Gripper|SubClassOf|EndEffector, sspd|hasComponent|dimc, dimc|hasApplicableForce|integer#43, gpj|requiresForce|integer#43, equal(integer#43,integer#43). ",
      "answer": " the robot can push the mini shopping cart because it has a pushing capability that allows it to interact with objects on a table and within its moving range, and the cart is on the table and not blocked by anything."
    },
    {
      "id": "a_push_hard_2b",
      "selected_classes": [
        "roomba",
        "wheel",
        "pr2",
        "manipulator"
      ],
      "question": "-Inference : fir|canPush|sa \n -Justifications : fir|Type|Pr2, Pr2|SubClassOf|Agent, fir|hasCapability|hk, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), hk|isCapabilityOf|fir, fir|hasGripper|zfe, zfe|Type|Manipulator, Manipulator|SubClassOf|Gripper, zfe|holdsSomething|boolean#false, zfe|Type|RigidEndEffector, sa|Type|RoombaRobot, RoombaRobot|SubClassOf|Object, sa|hasDisposition|yssk, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), yssk|isDispositionOf|sa, sa|hasPart|iskx, iskx|Type|Wheel, Wheel|SubClassOf|RollablePart, iskx|isOnRollableSurface|boolean#true, iskx|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, sa|isOnTable|egs, egs|isInSafeArea|ypae, ypae|isWithinMovingRangeOf|fir, zfe|Type|Gripper, Gripper|SubClassOf|EndEffector, fir|hasComponent|zfe, zfe|hasApplicableForce|integer#52, sa|requiresForce|integer#52, equal(integer#52,integer#52). ",
      "answer": " the Pr2 can push the Roomba robot because it has a pushing capability with a gripper that can apply sufficient force to move the robot, which is on a rollable surface and not blocked by anything, and the Roomba robot is also on a table in a safe area within the Pr2's reach."
    },
    {
      "id": "a_push_hard_3b",
      "selected_classes": [
        "remote controlled car",
        "pivot wheel",
        "robot",
        "claw"
      ],
      "question": "-Inference : fiu|canPush|bd \n -Justifications : fiu|Type|Robot, Robot|SubClassOf|Agent, fiu|hasCapability|poyw, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), poyw|isCapabilityOf|fiu, fiu|hasGripper|j, j|Type|Claw, Claw|SubClassOf|Gripper, j|holdsSomething|boolean#false, j|Type|RigidEndEffector, bd|Type|RemoteControlledCar, RemoteControlledCar|SubClassOf|Object, bd|hasDisposition|am, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), am|isDispositionOf|bd, bd|hasPart|p, p|Type|PivotWheel, PivotWheel|SubClassOf|RollablePart, p|isOnRollableSurface|boolean#true, p|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, bd|isOnTable|lb, lb|isInSafeArea|u, u|isWithinMovingRangeOf|fiu, j|Type|Gripper, Gripper|SubClassOf|EndEffector, fiu|hasComponent|j, j|hasApplicableForce|integer#66, bd|requiresForce|integer#66, equal(integer#66,integer#66). ",
      "answer": " the robot can push the car because it has a pushing capability with a gripper that can hold something, and the car is on a rollable surface, not blocked by anything, and is approachable by the robot."
    },
    {
      "id": "a_push_hard_4b",
      "selected_classes": [
        "office chair",
        "pivot wheel",
        "tiago",
        "mechanical hand"
      ],
      "question": "-Inference : joer|canPush|jhoy \n -Justifications : joer|Type|Tiago, Tiago|SubClassOf|Agent, joer|hasCapability|k, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), k|isCapabilityOf|joer, joer|hasGripper|yxqw, yxqw|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, yxqw|holdsSomething|boolean#false, yxqw|Type|RigidEndEffector, jhoy|Type|OfficeChair, OfficeChair|SubClassOf|Object, jhoy|hasDisposition|y, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), y|isDispositionOf|jhoy, jhoy|hasPart|fyb, fyb|Type|PivotWheel, PivotWheel|SubClassOf|RollablePart, fyb|isOnRollableSurface|boolean#true, fyb|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, jhoy|isOnTable|d, d|isInSafeArea|wivn, wivn|isWithinMovingRangeOf|joer, yxqw|Type|Gripper, Gripper|SubClassOf|EndEffector, joer|hasComponent|yxqw, yxqw|hasApplicableForce|integer#68, jhoy|requiresForce|integer#68, equal(integer#68,integer#68). ",
      "answer": " the Tiago can push the office chair because it has a pushing capability that allows it to interact with objects, and the office chair is on a rollable surface, not blocked by anything, and the Tiago's gripper is capable of applying force to the chair."
    },
    {
      "id": "a_push_hard_5b",
      "selected_classes": [
        "shopping cart",
        "caster",
        "pepper",
        "mechanical hand"
      ],
      "question": "-Inference : sil|canPush|jg \n -Justifications : sil|Type|Pepper, Pepper|SubClassOf|Agent, sil|hasCapability|ck, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), ck|isCapabilityOf|sil, sil|hasGripper|eytb, eytb|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, eytb|holdsSomething|boolean#false, eytb|Type|RigidEndEffector, jg|Type|MiniShoppingCart, MiniShoppingCart|SubClassOf|Object, jg|hasDisposition|sm, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), sm|isDispositionOf|jg, jg|hasPart|aa, aa|Type|Caster, Caster|SubClassOf|RollablePart, aa|isOnRollableSurface|boolean#true, aa|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, jg|isOnTable|dx, dx|isInSafeArea|htsx, htsx|isWithinMovingRangeOf|sil, eytb|Type|Gripper, Gripper|SubClassOf|EndEffector, sil|hasComponent|eytb, eytb|hasApplicableForce|integer#42, jg|requiresForce|integer#42, equal(integer#42,integer#42). ",
      "answer": " the pepper can push the mini shopping cart because it has a pushing capability through its mechanical hand, and the cart is on a rollable surface, not blocked by anything, making it approachable by the pepper."
    },
    {
      "id": "a_push_hard_6b",
      "selected_classes": [
        "shopping cart",
        "roller",
        "pepper",
        "mechanical hand"
      ],
      "question": "-Inference : cfm|canPush|oqx \n -Justifications : cfm|Type|Pepper, Pepper|SubClassOf|Agent, cfm|hasCapability|ghp, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), ghp|isCapabilityOf|cfm, cfm|hasGripper|nbe, nbe|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, nbe|holdsSomething|boolean#false, nbe|Type|RigidEndEffector, oqx|Type|MiniShoppingCart, MiniShoppingCart|SubClassOf|Object, oqx|hasDisposition|qecy, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), qecy|isDispositionOf|oqx, oqx|hasPart|ps, ps|Type|Roller, Roller|SubClassOf|RollablePart, ps|isOnRollableSurface|boolean#true, ps|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, oqx|isOnTable|xkk, xkk|isInSafeArea|sg, sg|isWithinMovingRangeOf|cfm, nbe|Type|Gripper, Gripper|SubClassOf|EndEffector, cfm|hasComponent|nbe, nbe|hasApplicableForce|integer#49, oqx|requiresForce|integer#49, equal(integer#49,integer#49). ",
      "answer": " the pepper can push the mini shopping cart because it has a pushing capability that requires force and the cart is on a rollable surface, not blocked by anything, and is approachable by the pepper's gripper."
    },
    {
      "id": "a_push_hard_7b",
      "selected_classes": [
        "shopping cart",
        "pivot roller",
        "robot",
        "manipulator"
      ],
      "question": "-Inference : cs|canPush|xv \n -Justifications : cs|Type|Robot, Robot|SubClassOf|Agent, cs|hasCapability|i, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), i|isCapabilityOf|cs, cs|hasGripper|p, p|Type|Manipulator, Manipulator|SubClassOf|Gripper, p|holdsSomething|boolean#false, p|Type|RigidEndEffector, xv|Type|MiniShoppingCart, MiniShoppingCart|SubClassOf|Object, xv|hasDisposition|s, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), s|isDispositionOf|xv, xv|hasPart|kqeq, kqeq|Type|PivotRoller, PivotRoller|SubClassOf|RollablePart, kqeq|isOnRollableSurface|boolean#true, kqeq|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, xv|isOnTable|uaxr, uaxr|isInSafeArea|cl, cl|isWithinMovingRangeOf|cs, p|Type|Gripper, Gripper|SubClassOf|EndEffector, cs|hasComponent|p, p|hasApplicableForce|integer#60, xv|requiresForce|integer#60, equal(integer#60,integer#60). ",
      "answer": " the robot can push the mini shopping cart because it has a pushing capability that applies to objects on a rollable surface, and the cart is on such a surface with no obstacles in its way."
    },
    {
      "id": "a_push_hard_8b",
      "selected_classes": [
        "remote controlled car",
        "caster",
        "robot",
        "two-finger claw"
      ],
      "question": "-Inference : q|canPush|so \n -Justifications : q|Type|Robot, Robot|SubClassOf|Agent, q|hasCapability|zh, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), zh|isCapabilityOf|q, q|hasGripper|ejvk, ejvk|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, ejvk|holdsSomething|boolean#false, ejvk|Type|RigidEndEffector, so|Type|RemoteControlledCar, RemoteControlledCar|SubClassOf|Object, so|hasDisposition|pfys, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), pfys|isDispositionOf|so, so|hasPart|x, x|Type|Caster, Caster|SubClassOf|RollablePart, x|isOnRollableSurface|boolean#true, x|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, so|isOnTable|k, k|isInSafeArea|q, q|isWithinMovingRangeOf|q, ejvk|Type|Gripper, Gripper|SubClassOf|EndEffector, q|hasComponent|ejvk, ejvk|hasApplicableForce|integer#34, so|requiresForce|integer#34, equal(integer#34,integer#34). ",
      "answer": " the robot can push the car because it has a pushing capability with a gripper that doesn't hold anything, and the car is on a rollable surface, making it approachable by the robot."
    },
    {
      "id": "a_push_hard_9b",
      "selected_classes": [
        "shopping cart",
        "roller",
        "pepper",
        "claw"
      ],
      "question": "-Inference : v|canPush|b \n -Justifications : v|Type|Pepper, Pepper|SubClassOf|Agent, v|hasCapability|i, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), i|isCapabilityOf|v, v|hasGripper|aeh, aeh|Type|Claw, Claw|SubClassOf|Gripper, aeh|holdsSomething|boolean#false, aeh|Type|RigidEndEffector, b|Type|MiniShoppingCart, MiniShoppingCart|SubClassOf|Object, b|hasDisposition|tak, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), tak|isDispositionOf|b, b|hasPart|pdo, pdo|Type|Roller, Roller|SubClassOf|RollablePart, pdo|isOnRollableSurface|boolean#true, pdo|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, b|isOnTable|wtkc, wtkc|isInSafeArea|iim, iim|isWithinMovingRangeOf|v, aeh|Type|Gripper, Gripper|SubClassOf|EndEffector, v|hasComponent|aeh, aeh|hasApplicableForce|integer#50, b|requiresForce|integer#50, equal(integer#50,integer#50). ",
      "answer": " the pepper can push the mini shopping cart because it has a pushing capability that applies to objects with a gripper and roller parts, which are on a rollable surface and not blocked by anything, allowing the pepper to approach the cart safely."
    },
    {
      "id": "a_push_hard_10b",
      "selected_classes": [
        "remote controlled car",
        "roller",
        "tiago",
        "manipulator"
      ],
      "question": "-Inference : u|canPush|srdl \n -Justifications : u|Type|Tiago, Tiago|SubClassOf|Agent, u|hasCapability|jfw, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), jfw|isCapabilityOf|u, u|hasGripper|g, g|Type|Manipulator, Manipulator|SubClassOf|Gripper, g|holdsSomething|boolean#false, g|Type|RigidEndEffector, srdl|Type|RemoteControlledCar, RemoteControlledCar|SubClassOf|Object, srdl|hasDisposition|ujth, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), ujth|isDispositionOf|srdl, srdl|hasPart|e, e|Type|Roller, Roller|SubClassOf|RollablePart, e|isOnRollableSurface|boolean#true, e|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, srdl|isOnTable|nbwv, nbwv|isInSafeArea|bc, bc|isWithinMovingRangeOf|u, g|Type|Gripper, Gripper|SubClassOf|EndEffector, u|hasComponent|g, g|hasApplicableForce|integer#48, srdl|requiresForce|integer#48, equal(integer#48,integer#48). ",
      "answer": " the Tiago can push because it has a pushing capability that allows it to interact with objects, and as a remote-controlled car, it can move around on a table without being blocked by anything, making it approachable by other agents."
    },
    {
      "id": "a_push_hard_11b",
      "selected_classes": [
        "office chair",
        "wheel",
        "pepper",
        "claw"
      ],
      "question": "-Inference : c|canPush|ta \n -Justifications : c|Type|Pepper, Pepper|SubClassOf|Agent, c|hasCapability|i, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), i|isCapabilityOf|c, c|hasGripper|y, y|Type|Claw, Claw|SubClassOf|Gripper, y|holdsSomething|boolean#false, y|Type|RigidEndEffector, ta|Type|OfficeChair, OfficeChair|SubClassOf|Object, ta|hasDisposition|epus, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), epus|isDispositionOf|ta, ta|hasPart|em, em|Type|Wheel, Wheel|SubClassOf|RollablePart, em|isOnRollableSurface|boolean#true, em|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, ta|isOnTable|fhs, fhs|isInSafeArea|hltr, hltr|isWithinMovingRangeOf|c, y|Type|Gripper, Gripper|SubClassOf|EndEffector, c|hasComponent|y, y|hasApplicableForce|integer#68, ta|requiresForce|integer#68, equal(integer#68,integer#68). ",
      "answer": " the pepper can push the office chair because it has a pushing capability that allows it to interact with objects on a table, and the chair is on the table, not blocked by anything, and the pepper's gripper can apply the necessary force."
    },
    {
      "id": "a_push_hard_12b",
      "selected_classes": [
        "toy wagon",
        "roller",
        "pepper",
        "mechanical hand"
      ],
      "question": "-Inference : gj|canPush|v \n -Justifications : gj|Type|Pepper, Pepper|SubClassOf|Agent, gj|hasCapability|lav, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), lav|isCapabilityOf|gj, gj|hasGripper|q, q|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, q|holdsSomething|boolean#false, q|Type|RigidEndEffector, v|Type|ToyWagon, ToyWagon|SubClassOf|Object, v|hasDisposition|wr, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), wr|isDispositionOf|v, v|hasPart|ehx, ehx|Type|Roller, Roller|SubClassOf|RollablePart, ehx|isOnRollableSurface|boolean#true, ehx|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, v|isOnTable|d, d|isInSafeArea|wjk, wjk|isWithinMovingRangeOf|gj, q|Type|Gripper, Gripper|SubClassOf|EndEffector, gj|hasComponent|q, q|hasApplicableForce|integer#61, v|requiresForce|integer#61, equal(integer#61,integer#61). ",
      "answer": " the pepper can push the toy wagon because it has a pushing capability that applies to objects on a rollable surface, and the wagon is both rollable and not blocked by anything, with sufficient force required for the action."
    },
    {
      "id": "a_push_hard_13b",
      "selected_classes": [
        "remote controlled car",
        "wheel",
        "pr2",
        "two-finger claw"
      ],
      "question": "-Inference : ez|canPush|ls \n -Justifications : ez|Type|Pr2, Pr2|SubClassOf|Agent, ez|hasCapability|axk, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), axk|isCapabilityOf|ez, ez|hasGripper|qusp, qusp|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, qusp|holdsSomething|boolean#false, qusp|Type|RigidEndEffector, ls|Type|RemoteControlledCar, RemoteControlledCar|SubClassOf|Object, ls|hasDisposition|dhtp, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), dhtp|isDispositionOf|ls, ls|hasPart|k, k|Type|Wheel, Wheel|SubClassOf|RollablePart, k|isOnRollableSurface|boolean#true, k|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, ls|isOnTable|y, y|isInSafeArea|tra, tra|isWithinMovingRangeOf|ez, qusp|Type|Gripper, Gripper|SubClassOf|EndEffector, ez|hasComponent|qusp, qusp|hasApplicableForce|integer#66, ls|requiresForce|integer#66, equal(integer#66,integer#66). ",
      "answer": " the Pr2 can push the car because it has a pushing capability with its two-finger claw gripper, and the car is on a rollable surface, not blocked by anything, and is approachable by the robot while being on a table within a safe area."
    },
    {
      "id": "a_push_hard_14b",
      "selected_classes": [
        "office chair",
        "pivot wheel",
        "robot",
        "manipulator"
      ],
      "question": "-Inference : r|canPush|jhzg \n -Justifications : r|Type|Robot, Robot|SubClassOf|Agent, r|hasCapability|mmtd, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), mmtd|isCapabilityOf|r, r|hasGripper|y, y|Type|Manipulator, Manipulator|SubClassOf|Gripper, y|holdsSomething|boolean#false, y|Type|RigidEndEffector, jhzg|Type|OfficeChair, OfficeChair|SubClassOf|Object, jhzg|hasDisposition|bwu, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), bwu|isDispositionOf|jhzg, jhzg|hasPart|z, z|Type|PivotWheel, PivotWheel|SubClassOf|RollablePart, z|isOnRollableSurface|boolean#true, z|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, jhzg|isOnTable|c, c|isInSafeArea|g, g|isWithinMovingRangeOf|r, y|Type|Gripper, Gripper|SubClassOf|EndEffector, r|hasComponent|y, y|hasApplicableForce|integer#59, jhzg|requiresForce|integer#59, equal(integer#59,integer#59). ",
      "answer": " the robot can push the office chair because it has a pushing capability that applies to objects that are not blocked by something and have a pivot wheel on them, which allows for movement on a table within a safe area, and the force required matches the robot's component force."
    },
    {
      "id": "a_push_hard_15b",
      "selected_classes": [
        "toy wagon",
        "wheel",
        "pepper",
        "two-finger claw"
      ],
      "question": "-Inference : le|canPush|j \n -Justifications : le|Type|Pepper, Pepper|SubClassOf|Agent, le|hasCapability|cw, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), cw|isCapabilityOf|le, le|hasGripper|r, r|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, r|holdsSomething|boolean#false, r|Type|RigidEndEffector, j|Type|ToyWagon, ToyWagon|SubClassOf|Object, j|hasDisposition|umkp, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), umkp|isDispositionOf|j, j|hasPart|ff, ff|Type|Wheel, Wheel|SubClassOf|RollablePart, ff|isOnRollableSurface|boolean#true, ff|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, j|isOnTable|ev, ev|isInSafeArea|f, f|isWithinMovingRangeOf|le, r|Type|Gripper, Gripper|SubClassOf|EndEffector, le|hasComponent|r, r|hasApplicableForce|integer#47, j|requiresForce|integer#47, equal(integer#47,integer#47). ",
      "answer": " the pepper can push the toy wagon because it has a pushing capability that includes holding something with its gripper, and the toy wagon is on a rollable surface, making it approachable by the pepper."
    },
    {
      "id": "a_push_hard_16b",
      "selected_classes": [
        "office chair",
        "wheel",
        "pr2",
        "claw"
      ],
      "question": "-Inference : bxm|canPush|noy \n -Justifications : bxm|Type|Pr2, Pr2|SubClassOf|Agent, bxm|hasCapability|v, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), v|isCapabilityOf|bxm, bxm|hasGripper|n, n|Type|Claw, Claw|SubClassOf|Gripper, n|holdsSomething|boolean#false, n|Type|RigidEndEffector, noy|Type|OfficeChair, OfficeChair|SubClassOf|Object, noy|hasDisposition|s, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), s|isDispositionOf|noy, noy|hasPart|sw, sw|Type|Wheel, Wheel|SubClassOf|RollablePart, sw|isOnRollableSurface|boolean#true, sw|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, noy|isOnTable|u, u|isInSafeArea|frx, frx|isWithinMovingRangeOf|bxm, n|Type|Gripper, Gripper|SubClassOf|EndEffector, bxm|hasComponent|n, n|hasApplicableForce|integer#40, noy|requiresForce|integer#40, equal(integer#40,integer#40). ",
      "answer": " the Pr2 can push the office chair because it has a pushing capability that allows it to grasp and move an object, and the office chair is on a rollable surface, not blocked by anything, and is approachable by the robot."
    },
    {
      "id": "a_push_hard_17b",
      "selected_classes": [
        "toy wagon",
        "caster",
        "robot",
        "manipulator"
      ],
      "question": "-Inference : ahuz|canPush|aic \n -Justifications : ahuz|Type|Robot, Robot|SubClassOf|Agent, ahuz|hasCapability|olsa, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), olsa|isCapabilityOf|ahuz, ahuz|hasGripper|gci, gci|Type|Manipulator, Manipulator|SubClassOf|Gripper, gci|holdsSomething|boolean#false, gci|Type|RigidEndEffector, aic|Type|ToyWagon, ToyWagon|SubClassOf|Object, aic|hasDisposition|kdlb, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), kdlb|isDispositionOf|aic, aic|hasPart|e, e|Type|Caster, Caster|SubClassOf|RollablePart, e|isOnRollableSurface|boolean#true, e|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, aic|isOnTable|g, g|isInSafeArea|ycp, ycp|isWithinMovingRangeOf|ahuz, gci|Type|Gripper, Gripper|SubClassOf|EndEffector, ahuz|hasComponent|gci, gci|hasApplicableForce|integer#34, aic|requiresForce|integer#34, equal(integer#34,integer#34). ",
      "answer": " the robot can push the toy wagon because it has a pushing capability that allows it to interact with objects on a rollable surface, and the toy wagon is designed to be pushed and is not blocked by anything, making it approachable by the robot."
    },
    {
      "id": "a_push_hard_18b",
      "selected_classes": [
        "remote controlled car",
        "roller",
        "pr2",
        "manipulator"
      ],
      "question": "-Inference : nw|canPush|a \n -Justifications : nw|Type|Pr2, Pr2|SubClassOf|Agent, nw|hasCapability|trf, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), trf|isCapabilityOf|nw, nw|hasGripper|qsi, qsi|Type|Manipulator, Manipulator|SubClassOf|Gripper, qsi|holdsSomething|boolean#false, qsi|Type|RigidEndEffector, a|Type|RemoteControlledCar, RemoteControlledCar|SubClassOf|Object, a|hasDisposition|p, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), p|isDispositionOf|a, a|hasPart|t, t|Type|Roller, Roller|SubClassOf|RollablePart, t|isOnRollableSurface|boolean#true, t|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, a|isOnTable|fo, fo|isInSafeArea|gbj, gbj|isWithinMovingRangeOf|nw, qsi|Type|Gripper, Gripper|SubClassOf|EndEffector, nw|hasComponent|qsi, qsi|hasApplicableForce|integer#54, a|requiresForce|integer#54, equal(integer#54,integer#54). ",
      "answer": " the Pr2 can push the car because it has a pushing capability that allows it to grasp and move an object, the car being on a rollable surface and not blocked by anything, and the Pr2 having a gripper component with sufficient force to interact with the car."
    },
    {
      "id": "a_push_hard_19b",
      "selected_classes": [
        "roomba",
        "roller",
        "pr2",
        "claw"
      ],
      "question": "-Inference : wnkz|canPush|my \n -Justifications : wnkz|Type|Pr2, Pr2|SubClassOf|Agent, wnkz|hasCapability|wx, PushingCapability|EquivalentTo|(isCapabilityOf some (hasGripper min 1 (Gripper and (holdsSomething value boolean#false) and RigidEndEffector)), wx|isCapabilityOf|wnkz, wnkz|hasGripper|j, j|Type|Claw, Claw|SubClassOf|Gripper, j|holdsSomething|boolean#false, j|Type|RigidEndEffector, my|Type|RoombaRobot, RoombaRobot|SubClassOf|Object, my|hasDisposition|gv, PushableDisposition|EquivalentTo|(isDispositionOf some (hasPart some (RollablePart and (isOnRollableSurface value boolean#true) and (isBlockedBySomething value boolean#false))), gv|isDispositionOf|my, my|hasPart|ndj, ndj|Type|Roller, Roller|SubClassOf|RollablePart, ndj|isOnRollableSurface|boolean#true, ndj|isBlockedBySomething|boolean#false, (isOnTable o isInSafeArea o isWithinMovingRangeOf)|SubPropertyOf|isApproachableBy, my|isOnTable|xjxr, xjxr|isInSafeArea|yp, yp|isWithinMovingRangeOf|wnkz, j|Type|Gripper, Gripper|SubClassOf|EndEffector, wnkz|hasComponent|j, j|hasApplicableForce|integer#45, my|requiresForce|integer#45, equal(integer#45,integer#45). ",
      "answer": " the Pr2 can push the Roomba robot because it has a pushing capability with a gripper that can grasp and manipulate objects, while the Roomba robot is on a table, in a safe area, and within the Pr2's reach, requiring sufficient force to move it."
    }
  ]
}