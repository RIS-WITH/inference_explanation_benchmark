{
  "id": "a_grasp_medium_r",
  "template": [
    "__var0__|canGrasp|__var1__",
    [
      "__var0__|Type|__agent__",
      "__agent__|SubClassOf|Agent",
      "__var0__|hasCapability|__var3__",
      "GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo))",
      "__var3__|isCapabilityOf|__var0__",
      "__var0__|hasComponent|__var4__",
      "__var4__|Type|__component__",
      "__component__|SubClassOf|Gripper",
      "__var0__|hasComponent|__var8__",
      "__var8__|Type|MotionPlanningAlgo",
      "__var1__|Type|__object__",
      "__object__|SubClassOf|Object",
      "__var1__|hasDisposition|__var2__",
      "GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true)))",
      "__var2__|isDispositionOf|__var1__",
      "__var1__|hasPart|__var5__",
      "__var5__|Type|__part__",
      "__part__|SubClassOf|GraspablePart",
      "__var1__|isATouchableObject|boolean#true",
      "(isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy",
      "__var1__|isContainedIn|__var6__",
      "__var6__|isWithinGraspRangeOf|__var0__",
      "__var4__|Type|Gripper",
      "Gripper|SubClassOf|EndEffector",
      "__var0__|hasComponent|__var4__",
      "__var4__|hasOpeningWidth|integer#2",
      "__var1__|hasWidth|integer#1",
      "greaterThan(integer#2,integer#1)"
    ]
  ],
 "concepts" : [
  "can grasp", 
  "graspable disposition", "1GraspablePart", "touchable_object",
  "grasping capability", "1gripper", "motion_planing_algo",
  "reachable", "is_contained_in", "within_grasping_range",
  "opening width", "object_width"    
],
  "answers": [
    {
      "id": "a_grasp_medium_0r",
      "selected_classes": [
        "suitcase",
        "hold",
        "pepper",
        "manipulator"
      ],
      "question": "-Inference : yj|canGrasp|k \n -Justifications : yj|Type|Pepper, Pepper|SubClassOf|Agent, yj|hasCapability|x, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), x|isCapabilityOf|yj, yj|hasComponent|lep, lep|Type|Manipulator, Manipulator|SubClassOf|Gripper, yj|hasComponent|m, m|Type|MotionPlanningAlgo, k|Type|Suitcase, Suitcase|SubClassOf|Object, k|hasDisposition|b, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), b|isDispositionOf|k, k|hasPart|yfmc, yfmc|Type|Hold, Hold|SubClassOf|GraspablePart, k|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, k|isContainedIn|hay, hay|isWithinGraspRangeOf|yj, lep|Type|Gripper, Gripper|SubClassOf|EndEffector, yj|hasComponent|lep, lep|hasOpeningWidth|integer#71, k|hasWidth|integer#35, greaterThan(integer#71,integer#35). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pepper robot can grasp the suitcase because it has a grasping capability thanks to its manipulator component and motion planning algorithm, the suitcase being an object with a disposition that makes it graspable and within reach of the robot's gripper."
    },
    {
      "id": "a_grasp_medium_1r",
      "selected_classes": [
        "shovel",
        "hand grip",
        "pr2",
        "claw"
      ],
      "question": "-Inference : u|canGrasp|ohph \n -Justifications : u|Type|Pr2, Pr2|SubClassOf|Agent, u|hasCapability|ibho, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), ibho|isCapabilityOf|u, u|hasComponent|ab, ab|Type|Claw, Claw|SubClassOf|Gripper, u|hasComponent|v, v|Type|MotionPlanningAlgo, ohph|Type|Shovel, Shovel|SubClassOf|Object, ohph|hasDisposition|dgv, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), dgv|isDispositionOf|ohph, ohph|hasPart|vlv, vlv|Type|HandGrip, HandGrip|SubClassOf|GraspablePart, ohph|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, ohph|isContainedIn|vzd, vzd|isWithinGraspRangeOf|u, ab|Type|Gripper, Gripper|SubClassOf|EndEffector, u|hasComponent|ab, ab|hasOpeningWidth|integer#75, ohph|hasWidth|integer#61, greaterThan(integer#75,integer#61). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the shovel because it has a grasping capability thanks to its claw gripper and motion planning algorithm, the shovel being an object with a disposition that makes it graspable by the robot, and the shovel's width is within the robot's gripper opening width."
    },
    {
      "id": "a_grasp_medium_2r",
      "selected_classes": [
        "mug",
        "handle",
        "robot",
        "claw"
      ],
      "question": "-Inference : loh|canGrasp|h \n -Justifications : loh|Type|Robot, Robot|SubClassOf|Agent, loh|hasCapability|jdho, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), jdho|isCapabilityOf|loh, loh|hasComponent|f, f|Type|Claw, Claw|SubClassOf|Gripper, loh|hasComponent|zvtg, zvtg|Type|MotionPlanningAlgo, h|Type|Mug, Mug|SubClassOf|Object, h|hasDisposition|opfh, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), opfh|isDispositionOf|h, h|hasPart|w, w|Type|Handle, Handle|SubClassOf|GraspablePart, h|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, h|isContainedIn|xmm, xmm|isWithinGraspRangeOf|loh, f|Type|Gripper, Gripper|SubClassOf|EndEffector, loh|hasComponent|f, f|hasOpeningWidth|integer#71, h|hasWidth|integer#66, greaterThan(integer#71,integer#66). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the mug because it has a grasping capability thanks to its claw gripper and motion planning algorithm, the mug being an object with a disposition that makes it graspable by the robot, and the mug being within the robot's reach and grasp range."
    },
    {
      "id": "a_grasp_medium_3r",
      "selected_classes": [
        "mug",
        "handle",
        "pepper",
        "manipulator"
      ],
      "question": "-Inference : lk|canGrasp|tcc \n -Justifications : lk|Type|Pepper, Pepper|SubClassOf|Agent, lk|hasCapability|fhw, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), fhw|isCapabilityOf|lk, lk|hasComponent|fb, fb|Type|Manipulator, Manipulator|SubClassOf|Gripper, lk|hasComponent|cl, cl|Type|MotionPlanningAlgo, tcc|Type|Mug, Mug|SubClassOf|Object, tcc|hasDisposition|qoln, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), qoln|isDispositionOf|tcc, tcc|hasPart|jt, jt|Type|Handle, Handle|SubClassOf|GraspablePart, tcc|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, tcc|isContainedIn|pm, pm|isWithinGraspRangeOf|lk, fb|Type|Gripper, Gripper|SubClassOf|EndEffector, lk|hasComponent|fb, fb|hasOpeningWidth|integer#73, tcc|hasWidth|integer#58, greaterThan(integer#73,integer#58). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pepper robot can grasp the mug because it has a grasping capability thanks to its manipulator gripper and motion planning algorithm, the mug being an object with a disposition that makes it graspable and being within the robot's reach."
    },
    {
      "id": "a_grasp_medium_4r",
      "selected_classes": [
        "suitcase",
        "hand grip",
        "robot",
        "manipulator"
      ],
      "question": "-Inference : l|canGrasp|n \n -Justifications : l|Type|Robot, Robot|SubClassOf|Agent, l|hasCapability|qq, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), qq|isCapabilityOf|l, l|hasComponent|w, w|Type|Manipulator, Manipulator|SubClassOf|Gripper, l|hasComponent|tf, tf|Type|MotionPlanningAlgo, n|Type|Suitcase, Suitcase|SubClassOf|Object, n|hasDisposition|g, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), g|isDispositionOf|n, n|hasPart|zmj, zmj|Type|HandGrip, HandGrip|SubClassOf|GraspablePart, n|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, n|isContainedIn|ve, ve|isWithinGraspRangeOf|l, w|Type|Gripper, Gripper|SubClassOf|EndEffector, l|hasComponent|w, w|hasOpeningWidth|integer#62, n|hasWidth|integer#46, greaterThan(integer#62,integer#46). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the suitcase because it has a grasping capability thanks to its manipulator and motion planning algorithm components, the suitcase being an object with a disposition that makes it graspable by the robot, and the robot's gripper opening width is greater than the suitcase's width."
    },
    {
      "id": "a_grasp_medium_5r",
      "selected_classes": [
        "toy bucket",
        "hand grip",
        "tiago",
        "mechanical hand"
      ],
      "question": "-Inference : qzq|canGrasp|d \n -Justifications : qzq|Type|Tiago, Tiago|SubClassOf|Agent, qzq|hasCapability|xlv, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), xlv|isCapabilityOf|qzq, qzq|hasComponent|dabx, dabx|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, qzq|hasComponent|ef, ef|Type|MotionPlanningAlgo, d|Type|ToyBucket, ToyBucket|SubClassOf|Object, d|hasDisposition|lao, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), lao|isDispositionOf|d, d|hasPart|msgi, msgi|Type|HandGrip, HandGrip|SubClassOf|GraspablePart, d|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, d|isContainedIn|vch, vch|isWithinGraspRangeOf|qzq, dabx|Type|Gripper, Gripper|SubClassOf|EndEffector, qzq|hasComponent|dabx, dabx|hasOpeningWidth|integer#78, d|hasWidth|integer#67, greaterThan(integer#78,integer#67). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the Tiago robot can grasp the toy bucket because it has a grasping capability thanks to its mechanical hand and motion planning algorithm, the bucket being an object with a disposition that makes it graspable and being within the robot's reach. Additionally, the bucket's width is less than the opening width of the robot's gripper."
    },
    {
      "id": "a_grasp_medium_6r",
      "selected_classes": [
        "suitcase",
        "handle",
        "tiago",
        "manipulator"
      ],
      "question": "-Inference : ry|canGrasp|fb \n -Justifications : ry|Type|Tiago, Tiago|SubClassOf|Agent, ry|hasCapability|lxyu, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), lxyu|isCapabilityOf|ry, ry|hasComponent|emg, emg|Type|Manipulator, Manipulator|SubClassOf|Gripper, ry|hasComponent|bor, bor|Type|MotionPlanningAlgo, fb|Type|Suitcase, Suitcase|SubClassOf|Object, fb|hasDisposition|gju, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), gju|isDispositionOf|fb, fb|hasPart|drc, drc|Type|Handle, Handle|SubClassOf|GraspablePart, fb|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, fb|isContainedIn|cns, cns|isWithinGraspRangeOf|ry, emg|Type|Gripper, Gripper|SubClassOf|EndEffector, ry|hasComponent|emg, emg|hasOpeningWidth|integer#41, fb|hasWidth|integer#35, greaterThan(integer#41,integer#35). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the tiago can grasp the suitcase because it has a grasping capability thanks to its manipulator and motion planning algorithm components, the suitcase being an object with a disposition that makes it graspable and being within the robot's reach range. Additionally, the robot's gripper opening width is greater than the suitcase's width."
    },
    {
      "id": "a_grasp_medium_7r",
      "selected_classes": [
        "hammer",
        "grip",
        "pr2",
        "mechanical hand"
      ],
      "question": "-Inference : rvs|canGrasp|saku \n -Justifications : rvs|Type|Pr2, Pr2|SubClassOf|Agent, rvs|hasCapability|d, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), d|isCapabilityOf|rvs, rvs|hasComponent|rdm, rdm|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, rvs|hasComponent|dav, dav|Type|MotionPlanningAlgo, saku|Type|Hammer, Hammer|SubClassOf|Object, saku|hasDisposition|xv, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), xv|isDispositionOf|saku, saku|hasPart|bnwn, bnwn|Type|Grip, Grip|SubClassOf|GraspablePart, saku|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, saku|isContainedIn|xhjy, xhjy|isWithinGraspRangeOf|rvs, rdm|Type|Gripper, Gripper|SubClassOf|EndEffector, rvs|hasComponent|rdm, rdm|hasOpeningWidth|integer#65, saku|hasWidth|integer#48, greaterThan(integer#65,integer#48). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pr2 robot can grasp the hammer because it has a grasping capability thanks to its mechanical hand and motion planning algorithm, the hammer being an object with a disposition that makes it graspable, and the robot's end effector having a larger opening width than the hammer's width."
    },
    {
      "id": "a_grasp_medium_8r",
      "selected_classes": [
        "toy bucket",
        "hold",
        "pr2",
        "claw"
      ],
      "question": "-Inference : zlyv|canGrasp|dh \n -Justifications : zlyv|Type|Pr2, Pr2|SubClassOf|Agent, zlyv|hasCapability|x, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), x|isCapabilityOf|zlyv, zlyv|hasComponent|anug, anug|Type|Claw, Claw|SubClassOf|Gripper, zlyv|hasComponent|fn, fn|Type|MotionPlanningAlgo, dh|Type|ToyBucket, ToyBucket|SubClassOf|Object, dh|hasDisposition|owuq, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), owuq|isDispositionOf|dh, dh|hasPart|fbbs, fbbs|Type|Hold, Hold|SubClassOf|GraspablePart, dh|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, dh|isContainedIn|j, j|isWithinGraspRangeOf|zlyv, anug|Type|Gripper, Gripper|SubClassOf|EndEffector, zlyv|hasComponent|anug, anug|hasOpeningWidth|integer#71, dh|hasWidth|integer#68, greaterThan(integer#71,integer#68). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pr2 robot can grasp the toy bucket because it has a grasping capability thanks to its claw gripper and motion planning algorithm, the bucket being an object with a disposition that makes it graspable by the robot, and the bucket being within the robot's reach and grasp range."
    },
    {
      "id": "a_grasp_medium_9r",
      "selected_classes": [
        "cooking pot",
        "hand grip",
        "tiago",
        "two-finger claw"
      ],
      "question": "-Inference : ziw|canGrasp|rmqp \n -Justifications : ziw|Type|Tiago, Tiago|SubClassOf|Agent, ziw|hasCapability|vn, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), vn|isCapabilityOf|ziw, ziw|hasComponent|v, v|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, ziw|hasComponent|jrul, jrul|Type|MotionPlanningAlgo, rmqp|Type|CookingPot, CookingPot|SubClassOf|Object, rmqp|hasDisposition|r, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), r|isDispositionOf|rmqp, rmqp|hasPart|l, l|Type|HandGrip, HandGrip|SubClassOf|GraspablePart, rmqp|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, rmqp|isContainedIn|ikd, ikd|isWithinGraspRangeOf|ziw, v|Type|Gripper, Gripper|SubClassOf|EndEffector, ziw|hasComponent|v, v|hasOpeningWidth|integer#72, rmqp|hasWidth|integer#64, greaterThan(integer#72,integer#64). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the tiago robot can grasp the cooking pot because it has a grasping capability thanks to its two-finger claw gripper and motion planning algorithm, the pot being an object with a hand grip part that is touchable and within the robot's reach range."
    },
    {
      "id": "a_grasp_medium_10r",
      "selected_classes": [
        "cooking pot",
        "handle",
        "pr2",
        "two-finger claw"
      ],
      "question": "-Inference : f|canGrasp|i \n -Justifications : f|Type|Pr2, Pr2|SubClassOf|Agent, f|hasCapability|tmn, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), tmn|isCapabilityOf|f, f|hasComponent|fkyd, fkyd|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, f|hasComponent|hko, hko|Type|MotionPlanningAlgo, i|Type|CookingPot, CookingPot|SubClassOf|Object, i|hasDisposition|jizy, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), jizy|isDispositionOf|i, i|hasPart|m, m|Type|Handle, Handle|SubClassOf|GraspablePart, i|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, i|isContainedIn|vyi, vyi|isWithinGraspRangeOf|f, fkyd|Type|Gripper, Gripper|SubClassOf|EndEffector, f|hasComponent|fkyd, fkyd|hasOpeningWidth|integer#67, i|hasWidth|integer#64, greaterThan(integer#67,integer#64). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pr2 robot can grasp the cooking pot because it has a grasping capability thanks to its gripper and motion planning algorithm, the pot being an object with a disposition that makes it graspable by the robot, and the robot being able to reach the pot within its grasp range."
    },
    {
      "id": "a_grasp_medium_11r",
      "selected_classes": [
        "suitcase",
        "handle",
        "robot",
        "manipulator"
      ],
      "question": "-Inference : veox|canGrasp|eq \n -Justifications : veox|Type|Robot, Robot|SubClassOf|Agent, veox|hasCapability|rge, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), rge|isCapabilityOf|veox, veox|hasComponent|ynmt, ynmt|Type|Manipulator, Manipulator|SubClassOf|Gripper, veox|hasComponent|xsee, xsee|Type|MotionPlanningAlgo, eq|Type|Suitcase, Suitcase|SubClassOf|Object, eq|hasDisposition|sd, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), sd|isDispositionOf|eq, eq|hasPart|mvyk, mvyk|Type|Handle, Handle|SubClassOf|GraspablePart, eq|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, eq|isContainedIn|pjh, pjh|isWithinGraspRangeOf|veox, ynmt|Type|Gripper, Gripper|SubClassOf|EndEffector, veox|hasComponent|ynmt, ynmt|hasOpeningWidth|integer#79, eq|hasWidth|integer#68, greaterThan(integer#79,integer#68). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the suitcase because it has a grasping capability thanks to its manipulator and motion planning algorithm, the suitcase being an object with a disposition that makes it graspable by the robot, and the robot's end effector having a larger opening width than the suitcase's width."
    },
    {
      "id": "a_grasp_medium_12r",
      "selected_classes": [
        "shovel",
        "hand grip",
        "robot",
        "claw"
      ],
      "question": "-Inference : hhxw|canGrasp|r \n -Justifications : hhxw|Type|Robot, Robot|SubClassOf|Agent, hhxw|hasCapability|q, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), q|isCapabilityOf|hhxw, hhxw|hasComponent|c, c|Type|Claw, Claw|SubClassOf|Gripper, hhxw|hasComponent|l, l|Type|MotionPlanningAlgo, r|Type|Shovel, Shovel|SubClassOf|Object, r|hasDisposition|ntyc, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), ntyc|isDispositionOf|r, r|hasPart|rrb, rrb|Type|HandGrip, HandGrip|SubClassOf|GraspablePart, r|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, r|isContainedIn|euxq, euxq|isWithinGraspRangeOf|hhxw, c|Type|Gripper, Gripper|SubClassOf|EndEffector, hhxw|hasComponent|c, c|hasOpeningWidth|integer#63, r|hasWidth|integer#39, greaterThan(integer#63,integer#39). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the shovel because it has a grasping capability thanks to its claw gripper and motion planning algorithm, the shovel being an object with a disposition that makes it graspable by the robot, and the robot's end effector having a larger opening width than the shovel's width."
    },
    {
      "id": "a_grasp_medium_13r",
      "selected_classes": [
        "hammer",
        "grip",
        "tiago",
        "claw"
      ],
      "question": "-Inference : oz|canGrasp|jmx \n -Justifications : oz|Type|Tiago, Tiago|SubClassOf|Agent, oz|hasCapability|myif, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), myif|isCapabilityOf|oz, oz|hasComponent|fxk, fxk|Type|Claw, Claw|SubClassOf|Gripper, oz|hasComponent|hc, hc|Type|MotionPlanningAlgo, jmx|Type|Hammer, Hammer|SubClassOf|Object, jmx|hasDisposition|fwwl, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), fwwl|isDispositionOf|jmx, jmx|hasPart|pwf, pwf|Type|Grip, Grip|SubClassOf|GraspablePart, jmx|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, jmx|isContainedIn|ckkb, ckkb|isWithinGraspRangeOf|oz, fxk|Type|Gripper, Gripper|SubClassOf|EndEffector, oz|hasComponent|fxk, fxk|hasOpeningWidth|integer#58, jmx|hasWidth|integer#57, greaterThan(integer#58,integer#57). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the tiago robot can grasp the hammer because it has a grasping capability thanks to its claw gripper and motion planning algorithm, the hammer being an object with a disposition that makes it graspable by the robot, and the robot's end effector having a larger opening width than the hammer's width."
    },
    {
      "id": "a_grasp_medium_14r",
      "selected_classes": [
        "shovel",
        "grip",
        "robot",
        "mechanical hand"
      ],
      "question": "-Inference : otwz|canGrasp|tcvw \n -Justifications : otwz|Type|Robot, Robot|SubClassOf|Agent, otwz|hasCapability|v, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), v|isCapabilityOf|otwz, otwz|hasComponent|fpcj, fpcj|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, otwz|hasComponent|i, i|Type|MotionPlanningAlgo, tcvw|Type|Shovel, Shovel|SubClassOf|Object, tcvw|hasDisposition|mcyd, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), mcyd|isDispositionOf|tcvw, tcvw|hasPart|wnm, wnm|Type|Grip, Grip|SubClassOf|GraspablePart, tcvw|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, tcvw|isContainedIn|qm, qm|isWithinGraspRangeOf|otwz, fpcj|Type|Gripper, Gripper|SubClassOf|EndEffector, otwz|hasComponent|fpcj, fpcj|hasOpeningWidth|integer#62, tcvw|hasWidth|integer#44, greaterThan(integer#62,integer#44). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the shovel because it has a grasping capability thanks to its mechanical hand and motion planning algorithm, the shovel being an object with a disposition that makes it graspable by the robot, and the shovel's width is within the hand's opening width."
    },
    {
      "id": "a_grasp_medium_15r",
      "selected_classes": [
        "suitcase",
        "grip",
        "pr2",
        "mechanical hand"
      ],
      "question": "-Inference : e|canGrasp|i \n -Justifications : e|Type|Pr2, Pr2|SubClassOf|Agent, e|hasCapability|dwm, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), dwm|isCapabilityOf|e, e|hasComponent|k, k|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, e|hasComponent|gyh, gyh|Type|MotionPlanningAlgo, i|Type|Suitcase, Suitcase|SubClassOf|Object, i|hasDisposition|xf, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), xf|isDispositionOf|i, i|hasPart|nuqq, nuqq|Type|Grip, Grip|SubClassOf|GraspablePart, i|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, i|isContainedIn|c, c|isWithinGraspRangeOf|e, k|Type|Gripper, Gripper|SubClassOf|EndEffector, e|hasComponent|k, k|hasOpeningWidth|integer#39, i|hasWidth|integer#30, greaterThan(integer#39,integer#30). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the suitcase because it has a grasping capability thanks to its mechanical hand and motion planning algorithm, the suitcase being an object with a disposition that makes it graspable and within reach of the robot's end effector, which has a larger opening width than the suitcase's width."
    },
    {
      "id": "a_grasp_medium_16r",
      "selected_classes": [
        "mug",
        "hand grip",
        "pr2",
        "manipulator"
      ],
      "question": "-Inference : cqn|canGrasp|z \n -Justifications : cqn|Type|Pr2, Pr2|SubClassOf|Agent, cqn|hasCapability|vfl, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), vfl|isCapabilityOf|cqn, cqn|hasComponent|peo, peo|Type|Manipulator, Manipulator|SubClassOf|Gripper, cqn|hasComponent|h, h|Type|MotionPlanningAlgo, z|Type|Mug, Mug|SubClassOf|Object, z|hasDisposition|wtbi, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), wtbi|isDispositionOf|z, z|hasPart|mgp, mgp|Type|HandGrip, HandGrip|SubClassOf|GraspablePart, z|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, z|isContainedIn|wygg, wygg|isWithinGraspRangeOf|cqn, peo|Type|Gripper, Gripper|SubClassOf|EndEffector, cqn|hasComponent|peo, peo|hasOpeningWidth|integer#61, z|hasWidth|integer#33, greaterThan(integer#61,integer#33). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pr2 robot can grasp the mug because it has a grasping capability thanks to its gripper and motion planning algorithm, the mug being an object with a disposition that makes it graspable by the robot, and the robot's end effector having a larger opening width than the mug's width."
    },
    {
      "id": "a_grasp_medium_17r",
      "selected_classes": [
        "suitcase",
        "hand grip",
        "robot",
        "mechanical hand"
      ],
      "question": "-Inference : ps|canGrasp|kjk \n -Justifications : ps|Type|Robot, Robot|SubClassOf|Agent, ps|hasCapability|kbp, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), kbp|isCapabilityOf|ps, ps|hasComponent|uza, uza|Type|MechanicalHand, MechanicalHand|SubClassOf|Gripper, ps|hasComponent|lce, lce|Type|MotionPlanningAlgo, kjk|Type|Suitcase, Suitcase|SubClassOf|Object, kjk|hasDisposition|enq, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), enq|isDispositionOf|kjk, kjk|hasPart|ebiv, ebiv|Type|HandGrip, HandGrip|SubClassOf|GraspablePart, kjk|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, kjk|isContainedIn|lgs, lgs|isWithinGraspRangeOf|ps, uza|Type|Gripper, Gripper|SubClassOf|EndEffector, ps|hasComponent|uza, uza|hasOpeningWidth|integer#37, kjk|hasWidth|integer#32, greaterThan(integer#37,integer#32). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the robot can grasp the suitcase because it has a grasping capability thanks to its mechanical hand and motion planning algorithm, the suitcase being an object with a disposition that makes it graspable by the robot, and the robot being able to reach the suitcase within its grasp range."
    },
    {
      "id": "a_grasp_medium_18r",
      "selected_classes": [
        "hammer",
        "grip",
        "pepper",
        "two-finger claw"
      ],
      "question": "-Inference : m|canGrasp|g \n -Justifications : m|Type|Pepper, Pepper|SubClassOf|Agent, m|hasCapability|n, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), n|isCapabilityOf|m, m|hasComponent|x, x|Type|TwoFingerClaw, TwoFingerClaw|SubClassOf|Gripper, m|hasComponent|lg, lg|Type|MotionPlanningAlgo, g|Type|Hammer, Hammer|SubClassOf|Object, g|hasDisposition|zt, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), zt|isDispositionOf|g, g|hasPart|e, e|Type|Grip, Grip|SubClassOf|GraspablePart, g|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, g|isContainedIn|d, d|isWithinGraspRangeOf|m, x|Type|Gripper, Gripper|SubClassOf|EndEffector, m|hasComponent|x, x|hasOpeningWidth|integer#65, g|hasWidth|integer#44, greaterThan(integer#65,integer#44). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pepper robot can grasp the hammer because it has a grasping capability thanks to its gripper and motion planning algorithm components, the hammer being an object with a disposition that makes it graspable by the robot, and the robot's gripper opening width is greater than the hammer's width."
    },
    {
      "id": "a_grasp_medium_19r",
      "selected_classes": [
        "mug",
        "handle",
        "pr2",
        "manipulator"
      ],
      "question": "-Inference : sem|canGrasp|tlk \n -Justifications : sem|Type|Pr2, Pr2|SubClassOf|Agent, sem|hasCapability|rj, GraspingCapability|EquivalentTo|(isCapabilityOf some ((hasComponent some Gripper) and (hasComponent some MotionPlanningAlgo)), rj|isCapabilityOf|sem, sem|hasComponent|vaxn, vaxn|Type|Manipulator, Manipulator|SubClassOf|Gripper, sem|hasComponent|bzeg, bzeg|Type|MotionPlanningAlgo, tlk|Type|Mug, Mug|SubClassOf|Object, tlk|hasDisposition|ye, GraspableDisposition|EquivalentTo|(isDispositionOf some ((hasPart some GraspablePart) and (isATouchableObject value boolean#true))), ye|isDispositionOf|tlk, tlk|hasPart|nmu, nmu|Type|Handle, Handle|SubClassOf|GraspablePart, tlk|isATouchableObject|boolean#true, (isContainedIn o isWithinGraspRangeOf)|SubPropertyOf|isReachableBy, tlk|isContainedIn|rfh, rfh|isWithinGraspRangeOf|sem, vaxn|Type|Gripper, Gripper|SubClassOf|EndEffector, sem|hasComponent|vaxn, vaxn|hasOpeningWidth|integer#52, tlk|hasWidth|integer#42, greaterThan(integer#52,integer#42). -Rule : Agent(?a), hasCapability(?a, ?c), GraspingCapability(?c), Object(?o), hasDisposition(?o, ?d), GraspableDisposition(?d),               isReachableBy(?o,?a), EndEffector(?g), hasComponent(?a,?g), hasOpeningWidth(?g,?w1), hasWidth(?o,?w2), greaterThan(?w1,?w2) -> canGrasp(?a, ?o).",
      "answer": " the pr2 robot can grasp the mug because it has a grasping capability thanks to its manipulator and motion planning algorithm components, the mug being an object with a disposition that makes it graspable by the robot, and the robot being able to reach the mug within its grasp range."
    }
  ]
}